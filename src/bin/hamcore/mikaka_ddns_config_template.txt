# DDNS クライアント設定ファイル (自動生成)
# 
# 以下の設定ファイルは、本システムの初回起動時に
# 自動的に乱数で生成されたものです。
# このファイルの設定を書き換えると、自動的に設定が適用・変更されます。
# 
# 以下の URL 文字列中の secretKey= の後に続く部分が DDNS の
# シークレットキーです。
# このシークレットキーに対応した DDNS ホスト名はいつでもお好きなもの
# に変更できます。
# 
# このシークレットキーに対応した DDNS ホスト名を確認するには
# 以下の URL にアクセスして、secretKey 値を指定した上でクエリを実行して
# ください。
# また、label 値を指定すると、DDNS ホスト名を好きなものに変更すること
# ができます。
# https://<DDNS_DOMAIN>/control/DDNS_Host/
# 
# 詳しくは、以下の DDNS サーバーのドキュメントをご参照ください。
# https://<DDNS_DOMAIN>/control/
# https://<DDNS_DOMAIN>/rpc/
# 
# 以下のサンプルファイルでは、デフォルトで https://<DDNS_DOMAIN>/ の
# DDNS サーバーを使用するようになっていますが、
# 独自に立ち上げられた他の DDNS サーバーを使用するように
# 設定変更することも可能です。
# 
# [開発者向け情報]
# この設定ファイルは、初回起動時に自動生成されるものですが、
# 自動生成時における DDNS サーバーのドメイン名などの初期値は、
# ソースコード中の IPA-DN-ThinApps-Private/src/Vars/Vars.h
# に記載されている
# MIKAKA_DDNS_DEFAULT_DOMAIN および MIKAKA_DDNS_DEFAULT_SSL_SHA1 定数が
# そのまま利用されます。
# したがって、上記 Vars.h ファイルの設定値を変更して本ソフトウェアを
# ビルドし直すことにより、本ソフトウェアの初回起動時における本設定ファイル
# 内のDDNS サーバーのドメイン名などの初期値を変更することが可能です。


# DDNS 機能を有効にするか否かを指定します。

DDNS_ENABLED            true




# DDNS エントリを更新するために呼び出す URL を指定します。
# 「secretKey=」の後に続く文字列が、DDNS エントリの更新に必要なシークレットキーです。
# 「secretKey=」の後に続く文字列は、このホスト固有の値です。
# この文字列は、
# 「secretKey=」の後に続く文字列は、必ずバックアップしてください。
# 「email=abc」の後に続く文字列は、DDNS サーバーに登録するメールアドレスです。
# DDNS サーバーの API のパラメータについて、詳しくは、
# https://<DDNS_DOMAIN>/
# をご参照ください。

DDNS_UPDATE_URL         https://ddns-api-v4-static.<DDNS_DOMAIN>/rpc/DDNS_Host/?ip=myip&secretKey=<DDNS_SECRET_KEY>&email=abc@example.org




# ホストが自分自身の IPv4 アドレスが変化していないかどうか確認するために接続
# する URL です。これは、SSL/TLS は不要で、HTTP のアクセスのみで十分です。

DDNS_GETMYIP_URL        http://getmyip-v4-static.<DDNS_DOMAIN>/getmyip/






# 以下の SHA1 は DDNS サーバーの SSL 証明書のダイジェスト値です。
# 通常はユーザーが変更する必要はありませんが、
# 異なる DDNS サーバーを使用する場合は、変更する必要があります。
# なお、以下の文字列は secretKey とは異なりますので、注意してください。
# (secretKey の文字列は、上記の「DDNS_UPDATE_URL」に埋め込まれています。)

DDNS_SSL_DIGEST_SHA1    <DDNS_SHA1>


# [DDNS に関する開発者向け情報]
# 本ソフトウェアのソースコードのデフォルト設定 (上記の Vars.h の設定値) では、
# https://mikaka.ne.jp/ の DDNS サービスを利用するように構成されています。
# 本ソフトウェアが https://mikaka.ne.jp/ の DDNS サービスのサーバーを内部的
# に HTTPS で呼び出す際は、https://ddns-api-v4-static.mikaka.ne.jp/rpc/ という
# URL の HTTPS サーバーに SSL/TLS によって接続が行なわれます。
# この際のサーバー側証明書のダイジェスト値を検証することは、中間者攻撃を
# 防ぐために有益です。https://ddns-api-v4-static.mikaka.ne.jp/rpc/ はサンプル
# サーバーで、この証明書ファイルは
# https://github.com/IPA-CyberLab/IPA-DN-Cores/blob/295a459ecd0512d1ce05d1f76c1a97be9d46bc49/Cores.NET/Misc/220614_MikakaDDnsServerSampleStaticCerts/01_SampleCert1.cer
# https://github.com/IPA-CyberLab/IPA-DN-Cores/blob/295a459ecd0512d1ce05d1f76c1a97be9d46bc49/Cores.NET/Misc/220614_MikakaDDnsServerSampleStaticCerts/01_SampleCert1.key
# で公開鍵および秘密鍵の両方が一般公開されているものが
# そのまま使用されています。
# したがって、https://mikaka.ne.jp/ の DDNS サービスをそのまま利用し続ける場合
# は、SSL/TLS の通信内容を一度解読して再度暗号化する方法の中間者攻撃に対して
# ぜい弱な状態となります。また、そもそも、https://mikaka.ne.jp/ の
# DDNS サービスは実験用に無償・無保証で公開しているものであり、安定性
# や継続性が保証されていません。
# そこで、業務で DDNS を利用される場合は、
# https://mikaka.ne.jp/ の DDNS サービスと同様の DDNS サービスを独自に
# 構築・運用され、その際に独自に生成したサーバー証明書ファイルを使用される
# ことを推奨します。詳しくは Mikaka DDNS サーバーのオープンソース版の
# ドキュメントをご参照ください。
# 
# TODO: ここに Mikaka DDNS サーバーのオープンソース版の案内 URL を後で
#       追記する予定である。


